// Chat API Test Utilities
const API_BASE_URL = "https://api20250614101404-egb7asc2hkewcvbh.southeastasia-01.azurewebsites.net"

export const testChatAPI = async (token, testData = {}) => {
    console.log("üß™ Testing Chat API...")

    const {
        receiverId = 11,
        message = "Test message from chat utility"
    } = testData

    // Test 1: Send Message
    console.log("üì§ Testing send message...")
    try {
        const sendResponse = await fetch(`${API_BASE_URL}/api/Chat/send`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({
                receiverId,
                message
            }),
        })

        console.log("Send Response Status:", sendResponse.status)
        if (sendResponse.ok) {
            console.log("‚úÖ Message sent successfully")
        } else {
            console.log("‚ùå Failed to send message:", await sendResponse.text())
        }
    } catch (error) {
        console.error("‚ùå Send message error:", error)
    }

    // Test 2: Get Conversation
    console.log("üì• Testing get conversation...")
    try {
        const conversationResponse = await fetch(`${API_BASE_URL}/api/Chat/conversation?receiverId=${receiverId}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })

        console.log("Conversation Response Status:", conversationResponse.status)
        if (conversationResponse.ok) {
            const data = await conversationResponse.json()
            console.log("‚úÖ Conversation data:", data)
            return data
        } else {
            console.log("‚ùå Failed to get conversation:", await conversationResponse.text())
        }
    } catch (error) {
        console.error("‚ùå Get conversation error:", error)
    }

    return null
}

export const formatChatMessage = (apiMessage, currentUserId) => {
    return {
        from: apiMessage.senderId === currentUserId ? "user" : "coach",
        text: apiMessage.message || apiMessage.content || "Tin nh·∫Øn tr·ªëng",
        timestamp: apiMessage.createdAt || apiMessage.timestamp || new Date().toISOString(),
        senderId: apiMessage.senderId,
        receiverId: apiMessage.receiverId
    }
}

export const getMockMembers = () => [
    { accountId: 10, name: "Nguy·ªÖn VƒÉn A", lastMessage: "C·∫£m ∆°n coach!", isOnline: true },
    { accountId: 11, name: "Tr·∫ßn Th·ªã B", lastMessage: "T√¥i c·∫ßn h·ªó tr·ª£", isOnline: false },
    { accountId: 12, name: "L√™ VƒÉn C", lastMessage: "L√†m sao ƒë·ªÉ b·ªè thu·ªëc?", isOnline: true },
    { accountId: 13, name: "Ph·∫°m Th·ªã D", lastMessage: "Coach ∆°i!", isOnline: true }
]

// Test function ƒë·ªÉ g·ªçi t·ª´ browser console
window.testChatAPI = testChatAPI

// Test coaches API
export const testCoachesAPI = async (token) => {
    console.log("üß™ Testing Coaches API...")

    try {
        const response = await fetch(`${API_BASE_URL}/api/Member/all-coaches`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })

        console.log("Coaches Response Status:", response.status)
        if (response.ok) {
            const data = await response.json()
            console.log("‚úÖ Coaches data:", data)
            return data
        } else {
            console.log("‚ùå Failed to get coaches:", await response.text())
        }
    } catch (error) {
        console.error("‚ùå Get coaches error:", error)
    }

    return null
}

// Test function ƒë·ªÉ g·ªçi t·ª´ browser console
window.testCoachesAPI = testCoachesAPI

// Test coach receiving messages scenario
export const testCoachReceiveMessages = async (token, coachTestData = {}) => {
    console.log("üß™ Testing Coach Receive Messages...")

    const {
        mockMemberIds = [10, 12, 13],
        testMessage = "Hello coach, I need help!"
    } = coachTestData

    // Simulate members sending messages to coach
    for (const memberId of mockMemberIds) {
        console.log(`üì§ Simulating member ${memberId} sending message to coach...`)

        // Note: Trong th·ª±c t·∫ø, member s·∫Ω g·ª≠i tin nh·∫Øn t·ªõi coach
        // ·ªû ƒë√¢y ch√∫ng ta test b·∫±ng c√°ch g·ªçi API t·ª´ perspective c·ªßa member
        try {
            const response = await fetch(`${API_BASE_URL}/api/Chat/send`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`, // Gi·∫£ s·ª≠ d√πng token c·ªßa member
                },
                body: JSON.stringify({
                    receiverId: 11, // Gi·∫£ s·ª≠ coach c√≥ ID = 11
                    message: `${testMessage} - From Member ${memberId}`
                }),
            })

            if (response.ok) {
                console.log(`‚úÖ Member ${memberId} sent message successfully`)
            } else {
                console.log(`‚ùå Member ${memberId} failed to send message`)
            }
        } catch (error) {
            console.error(`‚ùå Error from member ${memberId}:`, error)
        }
    }

    // Test coach getting conversation with each member
    console.log("üì• Testing coach getting conversations...")
    for (const memberId of mockMemberIds) {
        try {
            const response = await fetch(`${API_BASE_URL}/api/Chat/conversation?receiverId=${memberId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`, // Coach token
                    'Content-Type': 'application/json'
                }
            })

            if (response.ok) {
                const data = await response.json()
                console.log(`‚úÖ Coach conversation with member ${memberId}:`, data)
            } else {
                console.log(`‚ùå Failed to get conversation with member ${memberId}`)
            }
        } catch (error) {
            console.error(`‚ùå Conversation error with member ${memberId}:`, error)
        }
    }
}

// Test function ƒë·ªÉ g·ªçi t·ª´ browser console
window.testCoachReceiveMessages = testCoachReceiveMessages
